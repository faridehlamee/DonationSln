@page "/reportyeartodate"
@attribute [Authorize(Roles = "Admin")]
@using DonationBlazorServerSide.Data
@using DonationModel.Model
@inject DonationService donationService
@* @inject ContactService contactService *@

<h1>Donation Yearly Report</h1>

@if (donations == null) {
  <p><em>Loading...</em></p>
} else {
<table class="table table-striped">
    <thead>
        <tr>
            @* <th>TransId</th>
            <th>Date</th>
            <th>Amount</th>
            <th>Notes</th>
            <th>Contact</th>
            <th>Transaction Type</th>
            <th>Payment Method</th> *@

            <th>Year</th>
            <th>Amount in CAD</th>
            

        </tr>
    </thead>
    <tbody>
        @* @foreach (var item in donations)
        {
            <tr>
                <td>@item.TransId</td>
                <td>@item.Date.ToString("dd-MMM-yy")</td>
                <td>@item.Amount</td>
                <td>@item.Notes</td>
                <td>@item.Contact!.FirstName @item.Contact!.LastName</td>
                <td>@item.TransactionType!.Name</td>
                <td>@item.PaymentMethod!.Name</td>
           </tr>
        } *@

        @foreach (var yearlyGroup in donations.GroupBy(d => d.Date.Year))
            {
                var yearlyTotal = yearlyGroup.Sum(d => d.Amount);
                @* var yearToDateTotal = yearlyGroup
                    .Where(d => d.Date <= DateTime.Now) // Adjust based on your logic for year-to-date
                    .Sum(d => d.Amount); *@

                <tr>
                    <td>@yearlyGroup.Key</td>
                    <td>@yearlyTotal</td>
                    @* <td>@yearToDateTotal</td> *@
                </tr>
            }

    </tbody>
</table>
}


@code {
  List<Donation>? donations;


  protected override async Task OnInitializedAsync() {
    donations = await donationService.GetDonationsAsync();
  }

}


