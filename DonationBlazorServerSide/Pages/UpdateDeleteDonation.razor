@page "/updeldonation/{id}/{mode}"
@attribute [Authorize(Roles = "Admin")]
@using DonationBlazorServerSide.Data
@using DonationModel.Model
@inject ContactService contactService
@inject DonationService donationService
@inject ContactService contactService
@inject TransactionTypeService transactionTypeService
@inject PaymentMethodService paymentMethodService
@inject NavigationManager NavManager

@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Update/Delete Donation</PageTitle>

@if (donation != null && Mode == "edit") // Update
{
    <h1>Update Donation with Trans Id == @Id</h1>

<EditForm Model="@donation" OnValidSubmit="HandleValidSubmit">
    <div class="form-group" style="display:none">
        <label for="TransId" class="form-label">TransId</label>
        <InputNumber id="TransId" class="form-control" @bind-Value="donation.TransId" />
    </div>

    <div class="form-group">
        <label for="Date" class="form-label">Date</label>
        <InputDate id="Date" class="form-control" @bind-Value="donation.Date" />
    </div>

    <div class="form-group">
        <label for="Amount" class="form-label">Amount</label>
        <InputNumber id="Amount" class="form-control" @bind-Value="donation.Amount" />
        @if (donation.Amount <= 0)
        {
            <div class="text-danger">Please enter an amount greater than 0.</div>
        }
    </div>

    <div class="form-group">
        <label for="Notes" class="form-label">Notes:</label>
        <InputTextArea id="Notes" class="form-control" @bind-Value="donation.Notes" />
    </div>

    <div class="form-group">
        <label for="AccountNo" class="form-label">Select Contact</label>
        <InputSelect id="AccountNo" class="form-control" @bind-Value="donation.AccountNo">
            @foreach (var contact in contactsForSelectoptions!)
            {
                <option value="@contact.AccountNo">@($"{contact.FirstName} {contact.LastName}")</option>
            }
        </InputSelect>
        @if (donation.AccountNo == 0)
        {
            <div class="text-danger">Please select a contact.</div>
        }
    </div>

    <div class="form-group">
        <label for="TransactionTypeId" class="form-label">Select Transaction Type</label>
        <InputSelect id="TransactionTypeId" class="form-control" @bind-Value="donation.TransactionTypeId">
            @foreach (var item in transactionTypesForSelectOptions!)
            {
                <option value="@item.TransactionTypeId">@($"{item.Name}")</option>
            }
        </InputSelect>
        @if (donation.TransactionTypeId == 0)
        {
            <div class="text-danger">Please select a transaction type.</div>
        }
    </div>

    <div class="form-group">
        <label for="PaymentMethodId" class="form-label">Select Payment Method</label>
        <InputSelect id="PaymentMethodId" class="form-control" @bind-Value="donation.PaymentMethodId">
            @foreach (var item in paymentMethodsForSelectOptions!)
            {
                <option value="@item.PaymentMethodId">@($"{item.Name}")</option>
            }
        </InputSelect>
        @if (donation.PaymentMethodId == 0)
        {
            <div class="text-danger">Please select a payment method.</div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

    @code {
      
        private async Task HandleValidSubmit()
        {
           // Custom validation to ensure required values are entered or selected
            if (donation!.Amount <= 0) return;
            if (donation.AccountNo == 0) return;
            if (donation.TransactionTypeId == 0 ) return;
            if (donation.PaymentMethodId == 0) return;
            string modifiedBy = HttpContextAccessor.HttpContext!.User.Identity!.Name!;
            await donationService.UpdateDonationAsync(donation!.TransId, donation, modifiedBy);
            NavManager.NavigateTo("/donations");
        }
    }
}
else if (donation != null && Mode == "del")
{ 
    
    <fieldset>
        <legend>Delete Donation with TransId == @Id</legend>
        <p>Trans Id: @Id</p>
        <p>Date: @donation.Date</p>
        <p>Amount: @donation.Amount</p>
        <p>Notes: @donation.Notes</p>
        <p>Accountno: @donation.Contact!.FirstName @donation.Contact!.LastName</p>
        <p>TransactionTypeId: @donation.TransactionType!.Name</p>
        <p>PaymentMethodId: @donation.PaymentMethod!.Name</p>
    </fieldset>
    
    <p>Are you sure?</p>
    <button type="button" class="btn btn-danger" @onclick="HandleDeleteStudent">Delete</button>
    @code {
    private async Task HandleDeleteStudent()
    {
        await donationService.DeleteDonationAsync(donation!.TransId);
        NavManager.NavigateTo("/donations");
    }
}
}
else
{
    <p>Contact with ID == @Id not found</p>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Mode { get; set; }
    private Donation? donation = new Donation();

     List<Contact>? contactsForSelectoptions;
    List<TransactionType>? transactionTypesForSelectOptions;
    List<PaymentMethod>? paymentMethodsForSelectOptions;

    protected override async Task OnInitializedAsync()
    {
        int intId = Convert.ToInt32(Id);
        donation = await donationService.GetDonationByIdAsync(intId);
        contactsForSelectoptions = await contactService.GetContactsAsync();
        transactionTypesForSelectOptions = await transactionTypeService.GetTransactionTypesAsync();
        paymentMethodsForSelectOptions = await paymentMethodService.GetPaymentMethodsAsync();
        if (donation!.Date == DateTime.MinValue)
        {
          donation.Date = DateTime.Today;
        }
    }
}