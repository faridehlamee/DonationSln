
@page "/adddonation"
@attribute [Authorize(Roles = "Admin,Finance")]
@using DonationBlazorServerSide.Data
@using DonationModel.Model
@inject ContactService contactService
@inject DonationService donationService
@inject ContactService contactService
@inject TransactionTypeService transactionTypeService
@inject PaymentMethodService paymentMethodService
@inject NavigationManager NavManager

@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Add Donation</PageTitle>

<h1>Add Donation</h1>

<EditForm Model="@donation" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="TransId" class="form-label">TransId</label>
        <InputNumber id="TransId" class="form-control" @bind-Value="donation.TransId" />
    </div>

    <div class="form-group">
        <label for="Date" class="form-label">Date</label>
        <InputDate id="Date" class="form-control" @bind-Value="donation.Date" />
    </div>

    <div class="form-group">
        <label for="Amount" class="form-label">Amount</label>
        <InputNumber id="Amount" class="form-control" @bind-Value="donation.Amount" />
        @if (donation.Amount <= 0)
        {
            <div class="text-danger">Please enter an amount greater than 0.</div>
        }
    </div>

    <div class="form-group">
        <label for="Notes" class="form-label">Notes:</label>
        <InputTextArea id="Notes" class="form-control" @bind-Value="donation.Notes" />
    </div>

    <div class="form-group">
        <label for="AccountNo" class="form-label">Select Contact</label>
        <InputSelect id="AccountNo" class="form-control" @bind-Value="donation.AccountNo">
            @foreach (var contact in contactsForSelectoptions!)
            {
                <option value="@contact.AccountNo">@($"{contact.FirstName} {contact.LastName}")</option>
            }
        </InputSelect>
        @if (donation.AccountNo == 0)
        {
            <div class="text-danger">Please select a contact.</div>
        }
    </div>

    <div class="form-group">
        <label for="TransactionTypeId" class="form-label">Select Transaction Type</label>
        <InputSelect id="TransactionTypeId" class="form-control" @bind-Value="donation.TransactionTypeId">
            @foreach (var item in transactionTypesForSelectOptions!)
            {
                <option value="@item.TransactionTypeId">@($"{item.Name}")</option>
            }
        </InputSelect>
        @if (donation.TransactionTypeId == 0)
        {
            <div class="text-danger">Please select a transaction type.</div>
        }
    </div>

    <div class="form-group">
        <label for="PaymentMethodId" class="form-label">Select Payment Method</label>
        <InputSelect id="PaymentMethodId" class="form-control" @bind-Value="donation.PaymentMethodId">
            @foreach (var item in paymentMethodsForSelectOptions!)
            {
                <option value="@item.PaymentMethodId">@($"{item.Name}")</option>
            }
        </InputSelect>
        @if (donation.PaymentMethodId == 0)
        {
            <div class="text-danger">Please select a payment method.</div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
  private Donation donation = new Donation();
  private async Task HandleValidSubmit() {
    // Custom validation to ensure required values are entered or selected
    if (donation.Amount <= 0) return;
    if (donation.AccountNo == 0) return;
    if (donation.TransactionTypeId == 0 ) return;
    if (donation.PaymentMethodId == 0) return;
  
    string createdBy = HttpContextAccessor.HttpContext!.User.Identity!.Name!;
    await donationService.InsertDonationAsync(donation,createdBy);
    //If it is Admin show the donation list
    if (HttpContextAccessor.HttpContext.User.IsInRole("Admin"))
    {
      NavManager.NavigateTo("/donations");
    //If it is not Admin (in our project it will be Finance) show a Success page.
    }else{
      NavManager.NavigateTo($"/success/{donation.TransId}/{donation.Date}/{donation.Notes}/{donation.AccountNo}");
      @* NavManager.NavigateTo("/success"); *@
    }
    
  }

  List<Contact>? contactsForSelectoptions;
  List<TransactionType>? transactionTypesForSelectOptions;
  List<PaymentMethod>? paymentMethodsForSelectOptions;

  protected override async Task OnInitializedAsync() 
  {
    contactsForSelectoptions = await contactService.GetContactsAsync();
    transactionTypesForSelectOptions = await transactionTypeService.GetTransactionTypesAsync();
    paymentMethodsForSelectOptions = await paymentMethodService.GetPaymentMethodsAsync();

    // Check if it's a new record and set the Date to today's date
    //it didn't work when it was in HandleValidSubmit() method. here is ChatGPT explenation'
    /*
      It seems that Blazor might not automatically update the UI when setting the @bind-Value in this way. 
      Instead, you can manually set donation.Date before rendering the component. 
      Here's an updated version of your code:
    
    */
    if (donation.Date == DateTime.MinValue)
    {
      donation.Date = DateTime.Today;
    }

  }


}
